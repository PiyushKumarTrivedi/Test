"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.codeBuilder = codeBuilder;

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _DetectUndefESLint = require("./DetectUndefESLint");

var _DetectUndefinedIdentifier = require("./DetectUndefinedIdentifier");

var _DetectUndefinedIdentifier2 = _interopRequireDefault(_DetectUndefinedIdentifier);

var _jscodeshift = require("./utils/jscodeshift");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultFN = function defaultFN(source) {
  var j = (0, _jscodeshift.prepareJscodeshift)();
  var ast = j(source);
  return Object.assign({}, (0, _DetectUndefinedIdentifier2.default)(ast), {
    ast: ast,
    jscodeshift: j
  });
};

var eslintFN = function eslintFN(source) {
  var identifiers = (0, _DetectUndefESLint.getUndefinedIdentifier)(source);
  return {
    identifiers: identifiers,
    types: [],
    unusedImports: [],
    ast: null,
    jscodeshift: null
  };
};

var fnMap = {
  default: defaultFN,
  eslint: eslintFN
};

function codeBuilder(folder, detector) {
  function codeFile(file) {
    var content = _fs2.default.readFileSync(_path2.default.join(__dirname, "../__testfixtures__/" + folder + "/" + file + ".js")).toString();

    return code(content);
  }
  function code(source) {
    var _fnMap$detector = fnMap[detector](source),
        undefinedIdentifiers = _fnMap$detector.identifiers,
        undefinedTypes = _fnMap$detector.types,
        unusedImports = _fnMap$detector.unusedImports,
        ast = _fnMap$detector.ast,
        jscodeshift = _fnMap$detector.jscodeshift;

    var checker = {
      unusedImport: function unusedImport() {
        for (var _len = arguments.length, identifiers = Array(_len), _key = 0; _key < _len; _key++) {
          identifiers[_key] = arguments[_key];
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = identifiers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var identifier = _step.value;

            expect(unusedImports).toContain(identifier);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return checker;
      },
      usedImport: function usedImport() {
        for (var _len2 = arguments.length, identifiers = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          identifiers[_key2] = arguments[_key2];
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = identifiers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var identifier = _step2.value;

            expect(unusedImports).not.toContain(identifier);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return checker;
      },
      missImport: function missImport() {
        for (var _len3 = arguments.length, identifiers = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          identifiers[_key3] = arguments[_key3];
        }

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = identifiers[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var identifier = _step3.value;

            expect(undefinedIdentifiers).toContain(identifier);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return checker;
      },
      missImportType: function missImportType() {
        for (var _len4 = arguments.length, identifiers = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          identifiers[_key4] = arguments[_key4];
        }

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = identifiers[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var identifier = _step4.value;

            expect(undefinedTypes).toContain(identifier);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        return checker;
      },
      noImport: function noImport() {
        for (var _len5 = arguments.length, identifiers = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          identifiers[_key5] = arguments[_key5];
        }

        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = identifiers[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var identifier = _step5.value;

            expect(undefinedIdentifiers).not.toContain(identifier);
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        return checker;
      },
      noImportType: function noImportType() {
        for (var _len6 = arguments.length, identifiers = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          identifiers[_key6] = arguments[_key6];
        }

        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = identifiers[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var identifier = _step6.value;

            expect(undefinedTypes).not.toContain(identifier);
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }

        return checker;
      },
      expectAfterClean: function expectAfterClean(expected) {
        (0, _DetectUndefinedIdentifier.removeImportIdentifiers)(jscodeshift, ast, unusedImports);

        // console.log(removeCodeIndent(expected));
        var toLines = function toLines(text) {
          return text.split("\n").map(function (line) {
            return line.trim();
          }).filter(function (line) {
            return line !== "";
          });
        };
        var expectedLines = toLines(expected);
        var actualLines = toLines(ast.toSource());
        expect(expectedLines).toEqual(actualLines);

        return checker;
      }
    };
    return checker;
  }

  return {
    code: code,
    codeFile: codeFile
  };
}
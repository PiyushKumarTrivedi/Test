"use strict";

var _Config = require("./Config");

var _Config2 = _interopRequireDefault(_Config);

var _OptionFile = require("./utils/OptionFile");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("Config", function () {
  it("could apply diff add", function () {
    var packages = {
      a: {
        main: "A",
        others: ["A1"]
      }
    };
    var config = new _Config2.default(_OptionFile.initNormalizedOptions);
    // expect(config.getMemberInfo("A")).toBeDefined();
    // expect(config.getMemberInfo("A1")).toBeDefined();

    // Add
    config.applyPackagesDiff(packages, {
      removed: [],
      added: ["a"],
      replaced: []
    });
    expect(config.getMemberInfo("A")).toBeDefined();
    expect(config.getMemberInfo("A1")).toBeDefined();

    // Replace
    var newPackages = {
      a: {
        main: "B",
        others: ["A1"]
      }
    };
    config.applyPackagesDiff(newPackages, {
      removed: [],
      added: [],
      replaced: ["a"]
    });
    expect(config.getMemberInfo("A")).toBeUndefined();
    expect(config.getMemberInfo("B")).toBeDefined();
    expect(config.getMemberInfo("A1")).toBeDefined();

    // Remove
    config.applyPackagesDiff({}, { removed: ["a"], added: [], replaced: [] });
    expect(config.getMemberInfo("A")).toBeUndefined();
    expect(config.getMemberInfo("A1")).toBeUndefined();
  });
});

describe("parseIdentifierNameOfOther", function () {
  it("could parse alias", function () {
    var actual = (0, _Config.parseIdentifierNameOfOther)("Switch as UISwitch");

    expect(actual).toEqual({
      memberAlias: "UISwitch",
      memberName: "Switch"
    });
  });

  it("could parse non alias", function () {
    var actual = (0, _Config.parseIdentifierNameOfOther)("Switch");

    expect(actual).toEqual({
      memberAlias: "Switch",
      memberName: "Switch"
    });
  });
});
"use strict";

var _DetectUndefinedIdentifierTestUtils = require("./DetectUndefinedIdentifierTestUtils");

var _loop = function _loop(detector) {
  describe("Detect Undefined Identifier: " + detector, function () {
    var _codeBuilder = (0, _DetectUndefinedIdentifierTestUtils.codeBuilder)("DetectUndefinedIdentifier", detector),
        code = _codeBuilder.code,
        codeFile = _codeBuilder.codeFile;

    // it("_DebugUndefinedIdentifier", () => {
    //   codeFile("_DebugUndefinedIdentifier")
    //     .missImport("C")
    //     .noImport("a");
    // });

    it("detect identifier in jsx attribute value", function () {
      code("\n      const A = () => <B title={C} />;\n    ").missImport("C", "B", "React").noImport("A");
    });

    it("miss in BinaryExpression", function () {
      code("\n      const a = B + C;\n    ").missImport("B", "C").noImport("a");
    });

    it("miss in BinaryExpression (more complex)", function () {
      code("\n      const a = 3 / (B + (1+ (2 * C)));\n    ").missImport("B", "C").noImport("a");
    });

    it("miss in BinaryExpression inside object assignment", function () {
      code("\n      const a = {\n        x: B + C\n      };\n    ").missImport("B", "C").noImport("a", "x");
    });

    it("miss in BinaryExpression inside object assignment (more complex)", function () {
      code("\n      const a = {\n        x: 3 / (B + (1+ (2 * C)))\n      };\n    ").missImport("B", "C").noImport("a", "x");
    });

    it("expression", function () {
      code("\n    const a = B.c`aaa`\n    ").missImport("B").noImport("a", "c", "aaa");
    });

    it("should consider function as defined identifier", function () {
      code("\n      function a() {}\n    ").noImport("a");
    });

    it("should not consider arrow function as undefined identifier ", function () {
      code("\n      const a = () => {};\n    ").noImport("a");
    });

    it("destructure is not import", function () {
      code("\n      let {a: {b: {c}}} = x;\n      c.d = 1;\n    ").noImport("a", "b", "c", "d").missImport("x");
    });

    it("destructure in function is not import", function () {
      code("\n        function x({a: {b: {c}}}) {\n          c.d = 1;\n        };\n      ").noImport("x", "a", "b", "c", "d");
    });

    it("assign object shorthand property", function () {
      code("\n      const a = {\n        A,\n      }\n      ").missImport("A").noImport("a");
    });

    it("return undefined", function () {
      code("\n          function x() {\n            return y;\n          };\n        ").noImport("x", "config").missImport("y");
    });

    it("no import arrow function params", function () {
      code("\n      function f1() {\n        return p1 => f2(p1);\n      }\n      ").noImport("f1", "p1").missImport("f2");
    });

    it("not import func params", function () {
      code("\n        function x(config) {\n          const {type, ...rest} = config;\n        };\n      ").noImport("x", "config", "type", "rest");
    });

    it("var object pattern", function () {
      code("\n        const {a, b: b1, ...rest} = {};\n      \n        x(a, b, b1, rest);\n      ").noImport("a", "b1", "rest").missImport("x", "b");
    });

    it("function expression", function () {
      code("\n    const a = {\n      x(value) {\n        const y = value\n      }\n    }\n    ").noImport("a", "x", "y", "value");
    });

    it("function expression with object pattern", function () {
      code("\n    const a = {\n      x({value}) {\n        const y = value\n      }\n    }\n    ").noImport("a", "x", "y", "value");
    });

    it("import func call params", function () {
      code("\n        x(y);\n      ").missImport("x", "y");
    });

    it("call object function", function () {
      code("a.b();").noImport("b").missImport("a");
    });

    it("class extends super's attribute", function () {
      code("class A extends React.Component {}").noImport("A").missImport("React");
    });

    it("class extends", function () {
      code("\n      class A extends B {}").noImport("A").missImport("B");
    });

    it("class without name extends", function () {
      code("\n    function hoc() {\n      return class extends B {}\n    }\n      ").missImport("B");
    });

    it("class extends super's attribute with import", function () {
      code("\n      import React from \"react\";\n      class A extends React.Component {}").noImport("A", "React");
    });

    it("import", function () {
      code("\n        import A, {B, C as AnotherC} from \"d\";\n        A();\n        B();\n        C();\n        AnotherC();\n       ").noImport("A", "B", "AnotherC").missImport("C");
    });

    it("class extends with import", function () {
      code("\n        import {Component} from \"react\";\n        class A extends Component {}").noImport("A", "Component");
    });

    it("not import global", function () {
      code("\n        JSON.stringify(1);\n        Object.keys({});\n        ").noImport("JSON", "Object");
    });

    it("detect undefined jsx", function () {
      code("\n      const a = <Abc x={1} toggle/>\n      ").missImport("Abc", "React").noImport("x", "toggle");
    });

    it("detect undefined jsx but not component", function () {
      code("\n      const a = <div />\n      ").noImport("div");
    });

    it("detect undefined var in switch", function () {
      code("\n    switch (A) {\n      case B:\n        break;\n      default:\n        break\n    }\n    ").missImport("A", "B");
    });

    it("member expression", function () {
      code("\n    a.b.c = e.f.g;\n    ").missImport("a", "e").noImport("b", "c", "f", "g");
    });

    it("BinaryExpression with member expression", function () {
      // An example to show that we could put the code inside a file
      // This is useful when we has to escape a lot things inside the code
      codeFile("binary-expression-with-member-expression").noImport("b");
    });

    it("miss-jsx-identifier", function () {
      codeFile("miss-jsx-identifier").missImport("B", "React");
    });

    it("destructure in arrow function", function () {
      code("const a = ({ b }) => {};").noImport("b");
      code("\n      const a = ({ b }) => { \n        const { c } = b;\n      };").noImport("b");
      code("const a = ({  }) => { return b; };").missImport("b");
    });

    it("inside an object", function () {
      // z is an computed attribute
      code("\n    const a = {\n      x: {\n        y: B,\n        [z]: C,\n        u: D.x\n      }\n    }\n    ").missImport("B", "C", "z", "D").noImport("a", "x", "y", "u");
    });

    it("declared class is included", function () {
      code("\nclass A extends Component {\n\n}\nexport default connect(AnalyticsSelection);\n    ").missImport("connect", "Component").noImport("A");
    });

    it("declared class without extends is included", function () {
      code("\nclass A {\n\n}\nexport default connect(AnalyticsSelection);\n    ").missImport("connect").noImport("A");
    });

    it("remove unused type", function () {
      code("\n        import type {B1, C1} from './types2';\n\n        const E: C1 = F;\n    ").unusedImport("B1").usedImport("C1").expectAfterClean("\n        import type { C1 } from './types2';\n\n        const E: C1 = F;\n        ");
    });

    it("remove unused imports", function () {
      code("\n        import A, {B, C as D} from './A';\n        import type A1 from './types1';\n        import type {B1, C1} from './types2';\n        import \"a.css\";\n        import \"./SideEffect\";\n\n        const E: C1 = F;\n    ").unusedImport("A", "B", "D", "A1", "B1").missImport("F").noImport("C", "E").expectAfterClean("\n        import type { C1 } from './types2';\n        import \"a.css\";\n        import \"./SideEffect\";\n\n        const E: C1 = F;\n        ");
    });

    it("get unused with React", function () {
      code("\n        import React from 'react';\n        import A from './A';\n        \n        export const b = props => <div />;\n        ").unusedImport("A").usedImport("React").expectAfterClean("\n        import React from 'react';\n        \n        export const b = props => <div />;\n        ");
    });

    it("get unused with React 2", function () {
      code("\n        import React from 'react';\n        import A from './A';\n        ").unusedImport("A", "React").expectAfterClean("");
    });
  });
};

var _arr = ["default"];


for (var _i = 0; _i < _arr.length; _i++) {
  var detector = _arr[_i];
  _loop(detector);
}
"use strict";

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _jscodeshift = require("./utils/jscodeshift");

var _DetectImportedIdentifier = require("./DetectImportedIdentifier");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("Detect Undefined Identifier", function () {
  function codeFile(file) {
    var content = _fs2.default.readFileSync(_path2.default.join(__dirname, "../__testfixtures__/DetectImportedIdentifier/" + file + ".js")).toString();

    return code(content);
  }
  function code(source) {
    var j = (0, _jscodeshift.prepareJscodeshift)();
    var ast = j(source);
    var importedIdentifiers = (0, _DetectImportedIdentifier.detectImportedIdentifiers)(ast);
    // console.log(importedIdentifiers);

    var checker = {
      noImport: function noImport() {
        for (var _len = arguments.length, identifiers = Array(_len), _key = 0; _key < _len; _key++) {
          identifiers[_key] = arguments[_key];
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = identifiers[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var identifier = _step.value;

            expect(importedIdentifiers).toContain(identifier);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return checker;
      }
    };
    return checker;
  }

  it("Ensure codeFile work", function () {
    codeFile("a").noImport("a");
  });

  // it("_DebugImportedIdentifier", () => {
  //   codeFile("_DebugImportedIdentifier").noImport("a");
  // });
});
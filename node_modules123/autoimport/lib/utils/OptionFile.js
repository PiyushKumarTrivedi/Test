"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initNormalizedOptions = undefined;
exports.diffOptions = diffOptions;

var _lodash = require("lodash");

var initNormalizedOptions = exports.initNormalizedOptions = {
  packages: {},
  types: {},
  rootPath: "",
  projectPath: "",
  memberFolders: [],
  ignore: []
}; // import path from "path";


function _diffObject() {
  var oldObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var newObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var oldKeys = Object.keys(oldObject);
  var newKeys = Object.keys(newObject);
  var removed = (0, _lodash.difference)(oldKeys, newKeys);
  var added = (0, _lodash.difference)(newKeys, oldKeys);

  // Same key but value different
  var replaced = [];
  var sameKeys = (0, _lodash.intersection)(oldKeys, newKeys);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = sameKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var k = _step.value;

      if (!(0, _lodash.isEqual)(oldObject[k], newObject[k])) {
        replaced.push(k);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return {
    removed: removed,
    added: added,
    replaced: replaced
  };
}

function diffOptions(oldOptions, newOptions) {
  return {
    packages: _diffObject(oldOptions.packages, newOptions.packages)
  };
}

// export function loadOptionsFile(optionsFile: string) {
//   optionsFile = _normalizePath(optionsFile);
//   const options = require(optionsFile);
//   options.projectPath = path.dirname(optionsFile);

//   return options;
// }

// function _normalizePath(f) {
//   if (!path.isAbsolute(f)) {
//     return path.join(process.cwd(), f);
//   }

//   return f;
// }
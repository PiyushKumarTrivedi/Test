"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compose = exports.withQueryTransform = undefined;
exports.isIdentifier = isIdentifier;
exports.isObjectPattern = isObjectPattern;
exports.isLiteral = isLiteral;

var _lodash = require("lodash");

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var withQueryTransform = exports.withQueryTransform = function withQueryTransform(_ref) {
  var query = _ref.query,
      filter = _ref.filter,
      nodeTransform = _ref.nodeTransform,
      flatNodeTransform = _ref.flatNodeTransform;
  return function (ast) {
    var paths = ast.find(query, filter).paths();
    var ret = (0, _lodash.flatMap)(paths, function (path) {
      if (nodeTransform) {
        return [nodeTransform(path.node)];
      } else if (flatNodeTransform) {
        return flatNodeTransform(path.node);
      }

      return [];
    });

    return (0, _lodash.uniq)(ret);
  };
};

var compose = exports.compose = function compose() {
  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  return function (ast) {
    var ret = [];

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = funcs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var func = _step.value;

        ret = [].concat(_toConsumableArray(ret), _toConsumableArray(func(ast)));
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return ret;
  };
};

/**
 * Check if node is identifier
 */
function isIdentifier(node) {
  return node.type === "Identifier";
}

/**
 * Check if node is ObjectPattern
 */
function isObjectPattern(node) {
  return node.type === "ObjectPattern";
}

function isLiteral(node) {
  return node.type === "Literal";
}
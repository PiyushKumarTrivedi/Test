"use strict";

var _OptionFile = require("./OptionFile");

describe("Option change detect", function () {
  function options(oldOptions, newOptions) {
    var _diffOptions = (0, _OptionFile.diffOptions)(oldOptions, newOptions),
        _diffOptions$packages = _diffOptions.packages,
        replaced = _diffOptions$packages.replaced,
        removed = _diffOptions$packages.removed,
        added = _diffOptions$packages.added;

    var checker = {
      replacePackages: function replacePackages() {
        for (var _len = arguments.length, packages = Array(_len), _key = 0; _key < _len; _key++) {
          packages[_key] = arguments[_key];
        }

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = packages[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var package_ = _step.value;

            expect(replaced).toContain(package_);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return checker;
      },
      notReplacePackages: function notReplacePackages() {
        for (var _len2 = arguments.length, packages = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          packages[_key2] = arguments[_key2];
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = packages[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var package_ = _step2.value;

            expect(replaced).not.toContain(package_);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        return checker;
      },
      removePackages: function removePackages() {
        for (var _len3 = arguments.length, packages = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          packages[_key3] = arguments[_key3];
        }

        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = packages[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var package_ = _step3.value;

            expect(removed).toContain(package_);
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }

        return checker;
      },
      notRemovePackages: function notRemovePackages() {
        for (var _len4 = arguments.length, packages = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          packages[_key4] = arguments[_key4];
        }

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = packages[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var package_ = _step4.value;

            expect(removed).not.toContain(package_);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }

        return checker;
      },
      addPackages: function addPackages() {
        for (var _len5 = arguments.length, packages = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          packages[_key5] = arguments[_key5];
        }

        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = packages[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var package_ = _step5.value;

            expect(added).toContain(package_);
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5.return) {
              _iterator5.return();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }

        return checker;
      },
      notAddPackages: function notAddPackages() {
        for (var _len6 = arguments.length, packages = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          packages[_key6] = arguments[_key6];
        }

        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = packages[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var package_ = _step6.value;

            expect(added).not.toContain(package_);
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }

        return checker;
      }
    };

    return checker;
  }

  it("could detect remove and add package", function () {
    options({
      packages: {
        a: {},
        b: {}
      }
    }, {
      packages: {
        a: {},
        c: {}
      }
    }).removePackages("b").addPackages("c").notRemovePackages("a").notAddPackages("a").notReplacePackages("a");
  });

  it("could detect change package", function () {
    options({
      packages: {
        a: {
          main: "X"
        }
      }
    }, {
      packages: {
        a: {
          main: "Y"
        }
      }
    }).replacePackages("a");
  });

  it("could detect when old options is missed", function () {
    options({ packages: {} }, {
      packages: {
        a: {}
      }
    }).addPackages("a");
  });

  it("could handle missed 'packages' attribute", function () {
    options({ packages: {} }, {
      packages: {
        a: {}
      }
    }).addPackages("a");
  });
});
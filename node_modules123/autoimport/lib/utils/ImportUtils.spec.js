"use strict";

var _ImportUtils = require("./ImportUtils");

var _jscodeshift = require("./jscodeshift");

var formatBuilder = function formatBuilder(fn) {
  return function (text) {
    var normalizedText = removeCodeIndent(text);

    var j = (0, _jscodeshift.prepareJscodeshift)();
    var ast = j(normalizedText);

    fn(ast);

    var actual = ast.toSource();
    // console.log(`|${normalizedText}|`);
    var checker = {
      toBe: function toBe(expectedText) {
        var normalizedExpectedText = removeCodeIndent(expectedText);
        expect(actual).toEqual(normalizedExpectedText);

        return checker;
      }
    };

    return checker;
  };
};

describe("Sort Import", function () {
  var format = formatBuilder(_ImportUtils.sortImports);

  it("not change the first comment order", function () {
    format("\n      // @flow\n      import A from \"./A\";\n      import React from \"react\";\n    ").toBe("\n      // @flow\n      import React from \"react\";\n      import A from \"./A\";\n    ");
  });

  it("not change the first comment order - line block", function () {
    format("\n      /**\n       * abc\n       * \n       * @flow\n       */\n      import A from \"./A\";\n      import React from \"react\";\n    ").toBe("\n      /**\n       * abc\n       * \n       * @flow\n       */\n      import React from \"react\";\n      import A from \"./A\";\n    ");
  });

  it("external packages => internal outside packages => internal inside packages", function () {
    format("\n      // @flow\n      import B from \"../B\";\n      import A from \"./A\";\n      import React from \"react\";\n    ").toBe("\n      // @flow\n      import React from \"react\";\n      import B from \"../B\";\n      import A from \"./A\";\n    ");
  });
});
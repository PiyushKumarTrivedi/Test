"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectIdentifiers = exports.STOP_PROCESS = undefined;

var _recast = require("recast");

var _recast2 = _interopRequireDefault(_recast);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var namedTypes = _recast2.default.types.namedTypes;
var STOP_PROCESS = exports.STOP_PROCESS = Symbol();

var detectIdentifiers = exports.detectIdentifiers = function detectIdentifiers() {
  for (var _len = arguments.length, detectors = Array(_len), _key = 0; _key < _len; _key++) {
    detectors[_key] = arguments[_key];
  }

  return function (path) {
    var ret = new Set();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = detectors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var detector = _step.value;
        var _type = detector.type,
            _process = detector.process;

        var tmp = _findParent(path, {
          type: _type
        });

        if (tmp) {
          var out = _process(Object.assign({}, tmp, { path: path }));
          if (out === STOP_PROCESS) {
            return ret;
          }

          if (out != null) {
            // console.log("oput", out);
            ret.add(out);
            return ret;
          }
        }
      }

      // TODO Fix this
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var parent = path.parent;
    if (namedTypes.Property.check(parent.node) && parent.node.shorthand === true) {
      ret.add(path.node.name);
    }

    return ret;
  };
};


function _findParent(path_, query) {
  if (!path_ || !path_.parent) {
    return false;
  }
  var type = query.type;


  if (namedTypes[type].check(path_.parent.node)) {
    return { child: path_, parent: path_.parent };
  }

  return _findParent(path_.parent, query);
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

exports.getExportInfo = getExportInfo;
exports.getExportInfoFromSource = getExportInfoFromSource;
exports.file2Path = file2Path;
exports.scanSourceDir = scanSourceDir;

var _Query = require("./Query");

var _recast = require("recast");

var _recast2 = _interopRequireDefault(_recast);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _jscodeshift = require("./jscodeshift");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/_regenerator2.default.mark(_getFiles);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Scan source root to get exports
 */


var j = (0, _jscodeshift.prepareJscodeshift)();

var types = _recast2.default.types.namedTypes;

var getExportNameVarIdentifier = function getExportNameVarIdentifier(exportKind) {
  return (0, _Query.withQueryTransform)({
    query: types.ExportNamedDeclaration,
    filter: {
      exportKind: exportKind
    },
    flatNodeTransform: function flatNodeTransform(node) {
      var varDeclarations = node.declaration && node.declaration.declarations || [];
      // console.log("declarations", declarations);

      var specifiers = node.specifiers || [];
      var ret = [].concat(_toConsumableArray(varDeclarations.filter(function (item) {
        return (0, _Query.isIdentifier)(item.id);
      }).map(function (item) {
        return item.id.name;
      })), _toConsumableArray(specifiers.map(function (item) {
        return item.exported.name;
      })));

      if (node.declaration && (node.declaration.type === "FunctionDeclaration" || node.declaration.type === "TypeAlias" || node.declaration.type === "ClassDeclaration")) {
        ret.push(node.declaration.id.name);
      }

      return ret;
    }
  });
};

var ExportNameVarIdentifier = getExportNameVarIdentifier("value");
var ExportNameTypeIdentifier = getExportNameVarIdentifier("type");

function getExportInfo(file) {
  var source = _fs2.default.readFileSync(file).toString();

  return getExportInfoFromSource(file, source);
}

function getExportInfoFromSource(file, source) {
  var ast = j(source);
  var hasDefaultExport = ast.find(types.ExportDefaultDeclaration).size() > 0;

  var others = ExportNameVarIdentifier(ast);
  var otherTypes = ExportNameTypeIdentifier(ast);
  var ret = {
    others: others,
    types: otherTypes
  };

  if (hasDefaultExport) {
    var fileName = _path2.default.basename(file).replace(".js", "");
    if (fileName === "index") {
      fileName = _path2.default.basename(_path2.default.dirname(file));
    }

    ret.main = fileName;
  }

  return ret;
}

function file2Path(file) {
  var ret = file.replace(".js", "");
  if (ret.endsWith("/index")) {
    ret = ret.substr(0, ret.length - 6);
  }

  return "./" + ret;
}

function _getFiles(dir) {
  var dirName, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, fullPath;

  return _regenerator2.default.wrap(function _getFiles$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          // There is no node_modules in rootPath (src folder)
          dirName = _path2.default.basename(dir);
          // TODO Fix this hard-code (for ignore `build` dir)

          if (!(dirName === "node_modules" || dirName === "build")) {
            _context.next = 3;
            break;
          }

          return _context.abrupt("return");

        case 3:
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 6;
          _iterator = _fs2.default.readdirSync(dir)[Symbol.iterator]();

        case 8:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 20;
            break;
          }

          file = _step.value;
          fullPath = _path2.default.join(dir, file);

          if (!_fs2.default.lstatSync(fullPath).isDirectory()) {
            _context.next = 15;
            break;
          }

          return _context.delegateYield(_getFiles(fullPath), "t0", 13);

        case 13:
          _context.next = 17;
          break;

        case 15:
          _context.next = 17;
          return fullPath;

        case 17:
          _iteratorNormalCompletion = true;
          _context.next = 8;
          break;

        case 20:
          _context.next = 26;
          break;

        case 22:
          _context.prev = 22;
          _context.t1 = _context["catch"](6);
          _didIteratorError = true;
          _iteratorError = _context.t1;

        case 26:
          _context.prev = 26;
          _context.prev = 27;

          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }

        case 29:
          _context.prev = 29;

          if (!_didIteratorError) {
            _context.next = 32;
            break;
          }

          throw _iteratorError;

        case 32:
          return _context.finish(29);

        case 33:
          return _context.finish(26);

        case 34:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this, [[6, 22, 26, 34], [27,, 29, 33]]);
}

function scanSourceDir(rootPath) {
  var packagesOptions = {};
  var jsFilePattern = /^\w+.js$/;

  if (_fs2.default.existsSync(rootPath)) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = _getFiles(rootPath)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var file = _step2.value;

        var fileName = _path2.default.basename(file);
        if (!jsFilePattern.test(fileName)) {
          continue;
        }

        var relativeFile = _path2.default.relative(rootPath, file);
        var relativePath = file2Path(relativeFile);

        var exportInfo = getExportInfo(file);

        if (exportInfo.main != null || !exportInfo.others || exportInfo.others.length > 0 || !exportInfo.types || exportInfo.types.length > 0) {
          packagesOptions[relativePath] = exportInfo;
        }
        // optionSource[_file2Path(relativeFile)] = importInfo;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  return packagesOptions;
}
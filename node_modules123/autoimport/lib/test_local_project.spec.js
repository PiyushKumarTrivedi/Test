"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _ConfigProvider = require("./ConfigProvider");

var _ConfigProvider2 = _interopRequireDefault(_ConfigProvider);

var _jscodeshift = require("./utils/jscodeshift");

var _lodash = require("lodash");

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _shelljs = require("shelljs");

var _shelljs2 = _interopRequireDefault(_shelljs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/_regenerator2.default.mark(_getFiles);

var tmp = 0;
function _getFiles(dir) {
  var dirName, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, fullPath;

  return _regenerator2.default.wrap(function _getFiles$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          // There is no node_modules in rootPath (src folder)
          dirName = _path2.default.basename(dir);
          // TODO Fix this hard-code (for ignore `build` dir)

          if (!(dirName === "node_modules" || dirName === "build")) {
            _context.next = 3;
            break;
          }

          return _context.abrupt("return");

        case 3:
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 6;
          _iterator = _fs2.default.readdirSync(dir)[Symbol.iterator]();

        case 8:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 22;
            break;
          }

          file = _step.value;
          fullPath = _path2.default.join(dir, file);

          if (!_fs2.default.lstatSync(fullPath).isDirectory()) {
            _context.next = 16;
            break;
          }

          tmp++;
          return _context.delegateYield(_getFiles(fullPath), "t0", 14);

        case 14:
          _context.next = 19;
          break;

        case 16:
          tmp++;
          _context.next = 19;
          return fullPath;

        case 19:
          _iteratorNormalCompletion = true;
          _context.next = 8;
          break;

        case 22:
          _context.next = 28;
          break;

        case 24:
          _context.prev = 24;
          _context.t1 = _context["catch"](6);
          _didIteratorError = true;
          _iteratorError = _context.t1;

        case 28:
          _context.prev = 28;
          _context.prev = 29;

          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }

        case 31:
          _context.prev = 31;

          if (!_didIteratorError) {
            _context.next = 34;
            break;
          }

          throw _iteratorError;

        case 34:
          return _context.finish(31);

        case 35:
          return _context.finish(28);

        case 36:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this, [[6, 24, 28, 36], [29,, 31, 35]]);
}

describe.skip("Real project", function () {
  function fixture(projectPath) {
    var configProvider = new _ConfigProvider2.default();

    // const optionsFile = path.join(projectPath, "autoimport.json");
    var cacheFile = _path2.default.join(projectPath, "autoimport.json.cache");

    if (_fs2.default.existsSync(cacheFile)) {
      configProvider.fromCache([projectPath]);
    } else {
      // Start
      configProvider.updateProjectPaths([projectPath]);
      configProvider.cache();
    }

    var tool = {
      formatFile: function formatFile(f) {
        return configProvider.formatFile(f, _fs2.default.readFileSync(f).toString("utf-8"));
      }
    };

    return tool;
  }
  // Load project
  var projectPath = "/tmp/test-autoimport";

  var tool = fixture(projectPath);

  var i = 0;
  var allFiles = [];
  var sampleDir = __dirname + "/../../sample";

  var failedCases = [];
  var failFile = sampleDir + "/_fail.txt";
  if (_fs2.default.existsSync(failFile)) {
    var content = _fs2.default.readFileSync(failFile).toString("utf-8").trim();
    if (content !== "") {
      failedCases = content.split("\n");
    }
  }
  // console.log(failedCases);
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getFiles(projectPath + "/src")[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var f = _step2.value;

      if (!f.endsWith(".js")) {
        continue;
      }

      if (failedCases.length === 0 || failedCases.indexOf(f) >= 0) {
        allFiles.push(f);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = allFiles[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var _f = _step3.value;

      // console.log("f", f);
      // if (f.indexOf("TestIndex") > 0) {
      _test(_f);
      // break;
      // }
      i++;
      if (i > 500) {
        break;
      }
    }
    // console.log("t", tmp);
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  var j = (0, _jscodeshift.prepareJscodeshift)({
    parser: "flow"
  });

  function _buildSpecifier(spec) {
    if (spec.type === "ImportDefaultSpecifier") {
      return { default: spec.local.name };
    } else if (spec.type === "ImportSpecifier") {
      return { imported: spec.imported.name, local: spec.local.name };
    }

    // console.log("spec", JSON.stringify(spec, null, 2));

    return spec;
  }

  function _getImports(ast) {
    var items = [];
    var rawImports = [];
    ast.find(j.ImportDeclaration).forEach(function (path1) {
      // console.log(JSON.stringify(path.node, null, 2));
      // Ignore import without specifiers (like import 'a.css') because autoimport could not import them
      // Ignore import from third party
      // Ignore namespace import (ImportNamespaceSpecifier: import * as a from './b')
      var sourceValue = path1.node.source.value;
      if (path1.node.type === "ImportNamespaceSpecifier" ||
      // TODO only ignore default specifiers if it name is different with sourceValue
      path1.node.type === "ImportDefaultSpecifier" || path1.node.specifiers.length === 0 || !sourceValue.startsWith(".") || sourceValue.endsWith(".jpg") || sourceValue.endsWith(".png")) {
        return;
      }

      // console.log("s1", sourceValue, sourceValue.startsWith("."));

      rawImports.push(path1);
      var item = {
        source: sourceValue,
        specifiers: (0, _lodash.sortBy)(path1.node.specifiers.map(_buildSpecifier), ["imported"])
      };
      // let memberImports = path.node.specifiers.filter(specifier => {
      //   return specifier.type === "ImportSpecifier";
      // });

      items.push(item);
    });

    items = (0, _lodash.sortBy)(items, ["source"]);

    return [items, rawImports];
  }
  _shelljs2.default.rm("-rf", sampleDir);
  _shelljs2.default.mkdir("-p", sampleDir);
  _fs2.default.writeFileSync(failFile, "");

  function _test(fullPath) {
    // For each file, remove the import => load the auto import
    // Expect: number removed item equal number auto import item
    it("no import more " + fullPath, function () {
      var backupFile = fullPath + ".bk";
      if (_fs2.default.existsSync(backupFile)) {
        // console.log("restore backup");
        // Restore backup file
        _shelljs2.default.cp("-f", backupFile, fullPath);

        // Remove backup file
        // shelljs.rm(backupFile);
      } else {
        // Backup
        // console.log("backup");
        _shelljs2.default.cp("-f", fullPath, backupFile);
      }

      var source = _fs2.default.readFileSync(fullPath).toString("utf-8");
      // console.log("s", source);
      var ast = j(source);
      // console.log("ast", ast);

      var _getImports2 = _getImports(ast),
          _getImports3 = _slicedToArray(_getImports2, 1),
          imports = _getImports3[0];
      // console.log("imports", JSON.stringify(imports, null, 2));
      // console.log("a", rawImports);
      // Remove import with specifiers.length > 0


      var newSource1 = ast.find(j.ImportDeclaration).filter(function (p) {
        return p.node.specifiers.length > 0 && p.node.source.value.startsWith(".");
      }).remove().toSource();

      // console.log("s1", newSource1);

      _fs2.default.writeFileSync(fullPath, newSource1);
      // console.log(newSource1);

      // return;
      var newSource2 = tool.formatFile(fullPath);
      // console.log(newSource2);

      // const j2 = prepareJscodeshift({
      //   parser: "flow",
      // });
      var ast2 = j(newSource2);

      var _getImports4 = _getImports(ast2),
          _getImports5 = _slicedToArray(_getImports4, 1),
          imports2 = _getImports5[0];
      // console.log("imp22", imports2);

      _fs2.default.writeFileSync(fullPath, newSource2);

      if (!(0, _lodash.isEqual)(imports2, imports)) {
        var importDiff = function importDiff(i1, i2) {
          var ret = [];
          // Find
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = i1[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var item1 = _step4.value;

              var found = false;
              var _iteratorNormalCompletion5 = true;
              var _didIteratorError5 = false;
              var _iteratorError5 = undefined;

              try {
                for (var _iterator5 = i2[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                  var item2 = _step5.value;

                  if ((0, _lodash.isEqual)(item1, item2)) {
                    found = true;
                    break;
                  }
                }
              } catch (err) {
                _didIteratorError5 = true;
                _iteratorError5 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion5 && _iterator5.return) {
                    _iterator5.return();
                  }
                } finally {
                  if (_didIteratorError5) {
                    throw _iteratorError5;
                  }
                }
              }

              if (!found) {
                ret.push(item1);
              }
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }

          return ret;
        };

        // Generate test
        var fileName = _path2.default.basename(fullPath);
        var inputFile = fileName.replace(".js", ".input.js");
        var outputFile = fileName.replace(".js", ".output.js");

        _fs2.default.writeFileSync(sampleDir + "/" + inputFile, source);
        _fs2.default.writeFileSync(sampleDir + "/" + outputFile, newSource2);
        _fs2.default.writeFileSync(sampleDir + "/" + fileName.replace(".js", ".diff.json"), JSON.stringify(importDiff(imports, imports2), null, 2));

        _fs2.default.appendFileSync(failFile, fullPath + "\n");
        expect(imports2).toEqual(imports);
      } else {
        // Restore backup file
        _shelljs2.default.cp("-f", backupFile, fullPath);
      }
    });
  }

  // _test(projectPath + "/src/AppIndex.js");
  // _test(projectPath + "/src/apps/ui/index2.js");
});
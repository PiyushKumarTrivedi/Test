"use strict";

var _ConfigProvider = require("./ConfigProvider");

var _ConfigProvider2 = _interopRequireDefault(_ConfigProvider);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _shelljs = require("shelljs");

var _shelljs2 = _interopRequireDefault(_shelljs);

var _os = require("os");

var _os2 = _interopRequireDefault(_os);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe("ConfigProvider", function () {
  function fixture() {
    var configProvider = new _ConfigProvider2.default();
    var projectPath = _path2.default.join(_os2.default.tmpdir(), "autoimport-e2e");
    if (_fs2.default.existsSync(projectPath)) {
      // Remove this folder
      _shelljs2.default.rm("-rf", projectPath);
    }

    _shelljs2.default.mkdir("-p", projectPath);

    var testFile = _path2.default.join(projectPath, "a.js");
    var optionsFile = _path2.default.join(projectPath, "autoimport.json");

    var tool = {
      start: function start(options) {
        tool.writeOptions(options, { notify: false });
        configProvider.updateProjectPaths([projectPath]);
      },
      startWithoutOptionFile: function startWithoutOptionFile() {
        configProvider.updateProjectPaths([projectPath]);
      },

      writeOptions: function writeOptions(options_) {
        var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { notify: true },
            notify = _ref.notify;

        _fs2.default.writeFileSync(optionsFile, JSON.stringify(options_, null, 2));

        // Notify that optionsFile is updated
        if (notify) {
          configProvider.updateOptionFile(optionsFile);
        }

        return tool;
      },

      writeFile: function writeFile(file, content) {
        tool._initFile(file, content);

        var fullPath = _path2.default.join(projectPath, file);

        configProvider.addFile(fullPath, content);

        return tool;
      },

      // write file with out notify to configProvider
      _initFile: function _initFile(file, content) {
        var fullPath = _path2.default.join(projectPath, file);
        var dirName = _path2.default.dirname(fullPath);
        if (!_fs2.default.existsSync(dirName)) {
          _shelljs2.default.mkdir("-p", dirName);
        }

        _fs2.default.writeFileSync(fullPath, content);
      },

      format: function format(text, file) {
        var normalizedText = removeCodeIndent(text);

        var importFile = file != null ? _path2.default.join(projectPath, file) : testFile;
        var nextText = configProvider.formatFile(importFile, normalizedText);

        var checker = {
          is: function is(expectedText) {
            // console.log(removeCodeIndent(expectedText));
            var _toLines = function _toLines(text) {
              return text.trim().split("\n").map(function (line) {
                return line.trim();
              }).filter(function (line) {
                return line !== "";
              });
            };

            var inputLines = _toLines(nextText);
            var expectedLines = _toLines(removeCodeIndent(expectedText));
            expect(inputLines).toEqual(expectedLines);

            return checker;
          }
        };

        return checker;
      }
    };

    //
    tool._initFile("types.js", "\n    export type TName = string;\n    ");

    return tool;
  }

  it("could update the option file", function () {
    var tool = fixture();
    var options1 = {
      packages: {
        react1: {
          main: "React1",
          others: ["Component1"]
        },
        "react-dom1": {
          main: "ReactDOM1"
        }
      },
      rootPath: ""
    };
    tool.start(options1);

    // Format with ReactDOM1
    tool.format("ReactDOM1.render();").is("\nimport ReactDOM1 from \"react-dom1\";\nReactDOM1.render();\n    ");

    // Change options
    var options2 = Object.assign({}, options1, {
      packages: {
        react1: {
          main: "React1",
          others: ["Component1"]
        },
        "react-dom2": {
          main: "ReactDOM1"
        }
      }
    });
    tool.writeOptions(options2);

    tool.format("ReactDOM1.render();").is("\nimport ReactDOM1 from \"react-dom2\";\nReactDOM1.render();\n    ");

    // Change back to option1
    tool.writeOptions(options1);
    tool.format("ReactDOM1.render();").is("\nimport ReactDOM1 from \"react-dom1\";\nReactDOM1.render();\n        ");
  });

  it("could support alias", function () {
    var tool = fixture();
    var options1 = {
      packages: {
        antd: {
          others: ["Switch as UISwitch"]
        }
      },
      rootPath: ""
    };
    tool.start(options1);

    // Format with ReactDOM1
    tool.format("console.log(UISwitch);").is("\nimport { Switch as UISwitch } from \"antd\";\nconsole.log(UISwitch);\n    ");
  });

  it("could import with current alias", function () {
    var tool = fixture();
    var options1 = {
      packages: {
        antd: {
          others: ["Switch as UISwitch", "message"]
        }
      },
      rootPath: ""
    };
    tool.start(options1);

    // Format with ReactDOM1
    tool.format("\n        import { Switch as UISwitch } from \"antd\";\n        console.log(UISwitch);\n        console.log(message);\n      ").is("\n        import { message, Switch as UISwitch } from \"antd\";\n        console.log(UISwitch);\n        console.log(message);\n      ");
  });

  it("support ignore custom global identifiers", function () {
    var tool = fixture();
    var options1 = {
      rootPath: ""
    };
    tool.start(options1);

    tool.writeFile("Abc.js", "export default 1");
    tool.format("const x = Abc;").is("\n    import Abc from \"./Abc\";\n    const x = Abc;\n    ");

    tool.writeOptions({
      rootPath: "",
      ignore: ["Abc"]
    }, { notify: true });

    tool.format("const x1 = Abc;").is("const x1 = Abc;");
  });

  it("could build import for new file", function () {
    var tool = fixture();
    var options1 = {
      packages: {
        react: {
          main: "React",
          others: ["Component"]
        },
        "react-dom": {
          main: "ReactDOM"
        }
      },
      rootPath: ""
    };
    tool.start(options1);

    tool.writeFile("B.js", "export const B = 1;");
    tool.format("\nconst A = B;\nconst D = C;\n    ").is("\nimport { B } from \"./B\";\nconst A = B;\nconst D = C;\n    ");

    // Update B file to export C, now C could be auto imported
    tool.writeFile("B.js", "export const B = 1; export const C =2;");
    tool.format("\nconst A = B;\nconst D = C;\n    ").is("\nimport { B, C } from \"./B\";\nconst A = B;\nconst D = C;\n    ");
  });

  it("could import flow type", function () {
    var tool = fixture();
    var options1 = {
      packages: {},
      rootPath: ""
    };
    tool.start(options1);

    tool.format("\nconst A: TName = \"abc\";\n    ").is("\nimport type { TName } from \"./types\";\nconst A: TName = \"abc\";\n    ");
  });

  it("should import relative folder correctly in child folder", function () {
    var tool = fixture();
    var options1 = {
      packages: {},
      rootPath: ""
    };
    tool.start(options1);

    tool.writeFile("d1/d2/d3/X.js", "export const X =1;");

    tool.format("\nconst y = X;\n    ", "d1/d2/d3/Y.js").is("\nimport { X } from \"./X\";\nconst y = X;\n    ");
  });

  it("could work without autoimport.json", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.writeFile("d1/d2/d3/X.js", "export const X =1;");

    tool.format("\nconst y = X;\n        ", "d1/d2/d3/Y.js").is("\nimport { X } from \"./X\";\nconst y = X;\n        ");
  });

  it("support built-in React, ReactDOM", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.format("\n        const Hello = () => <div>Hello</div>;\n        ReactDOM.render(<Hello />);\n        ", "Hello.js").is("\n      import React from \"react\";\n      import ReactDOM from \"react-dom\";\n      const Hello = () => <div>Hello</div>;\n      ReactDOM.render(<Hello />);\n        ");
  });

  it("could import React and Component if not provided", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.format("\n        class A extends Component {\n          render() {\n            return <div>hello</div>;\n          }\n        }\n        ", "Hello.js").is("\n        import React, { Component } from \"react\";\n        class A extends Component {\n          render() {\n            return <div>hello</div>;\n          }\n        }\n        ");
  });

  it("support import file in different folder", function () {
    var tool = fixture();
    tool.start({
      rootPath: "src"
    });

    tool.writeFile("src/d1/d2/A.js", "export const A = 1;");

    tool.format("\n      const b = A;\n    ", "src/d1/e1/e2/e3/B.js").is("\n      import { A } from \"../../../d2/A\";\n      const b = A;\n    ");
  });

  it("could combine with the current import", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    // main
    tool.format("\n      import React from \"react\";\n      class A extends Component {\n        render() {\n          return <div />;\n        }\n      }\n    ").is("\n      import React, { Component } from \"react\";\n      class A extends Component {\n        render() {\n          return <div />;\n        }\n      }\n    ");

    // others
    tool.format("\n      import { Component } from \"react\";\n      class A extends Component {\n        render() {\n          return <div />;\n        }\n      }\n    ").is("\n        import React, { Component } from \"react\";\n        class A extends Component {\n          render() {\n            return <div />;\n          }\n        }\n    ");
  });

  it("could combine with the current import for type importKind `value` and `type`", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.writeFile("C.js", "\n          export type TName = string;\n          export type TAge = number;\n          export const A = 1;\n          export const B = 2;\n          export const X = 2;\n          export default \"hello\";\n      ");
    tool.format("\n        import type { TAge } from \"./C\";\n        import { X } from \"./C\";\n        import { A } from \"./C\";\n        const x: A = B;\n        const x2: X = 1;\n        const x3: TAge = 1;\n        const y: TName = C;\n      ").is("\n        import C, { A, B, X } from \"./C\";\n        import type { TAge, TName } from \"./C\";\n        const x: A = B;\n        const x2: X = 1;\n        const x3: TAge = 1;\n        const y: TName = C;\n      ");
  });

  it("keep flow comment at the first line", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.writeFile("A.js", "export const A = 1;");

    tool.format("\n      // @flow\n      const b = A;", "B.js").is("\n      // @flow\n      import { A } from \"./A\";\n\n      const b = A;");
  });

  it("keep flow comment at the first line for text has import", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.format("\n      // @flow\n      import React from 'react';\n      const b = () => <div />;", "B.js").is("\n      // @flow\n      import React from 'react';\n      const b = () => <div />;");
  });

  it("keep flow comment at the first line for text has import apart", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.format("\n      // @flow\n      import React from 'react';\n      class A extends Component {\n        render() {\n          return <div />;\n        }\n      }", "B.js").is("\n      // @flow\n      import React, { Component } from \"react\";\n      class A extends Component {\n        render() {\n          return <div />;\n        }\n      }");
  });

  it("auto sort even not have new import", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.format("\n      // @flow\n      import A from \"./A\";\n      import React from \"react\";\n\n      const b = () => <A />;\n      ", "B.js").is("\n      // @flow\n      import React from \"react\";\n      import A from \"./A\";\n\n      const b = () => <A />;\n      ");
  });

  it.skip("don't remove first comment when remove unused import", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.format("\n      // @flow\n      import A from \"./A\";\n      import React from \"react\";\n\n      const b = () => <div />;\n      ", "B.js").is("\n      // @flow\n      import React from \"react\";\n\n      const b = () => <div />;\n      ");
  });

  it("Could handle import index file in the sample folder", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.writeFile("components/A/index.js", "export const X = 1;");
    tool.format("const Y = X;", "components/A/A.js").is("\n      import { X } from \"./index\";\n      const Y = X;\n    ");
  });

  it("Remove 02 new lines between import statements with first comment", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.writeFile("A.js", "\n      // @flow\n      export class X extends Component {}\n\n      export class Y extends Component<{name: string}> {}\n\n      export default class Z extends Component {\n\n      }\n    ");

    tool.format("\n      // @flow\n      import React from \"react\";\n\n      import U from \"./U\";\n\n      import { Button } from \"antd\";\n      import type { TUser } from \"./types\";\n\n      const a: TUser = () => {\n        return (\n          <div>\n            <X />\n            <Y />\n            <A />\n            <U />\n            <Button />\n          </div>\n        )\n      }\n        ").is("\n        // @flow\n        import { Button } from \"antd\";\n        import React from \"react\";\n        import A, { X, Y } from \"./A\";\n        import U from \"./U\";\n        import type { TUser } from \"./types\";\n\n        const a: TUser = () => {\n          return (\n            <div>\n              <X />\n              <Y />\n              <A />\n              <U />\n              <Button />\n            </div>\n          )\n        }\n    ");
  });

  it("could handle export class", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.writeFile("A.js", "\n      // @flow\n      export class X extends Component {}\n\n      export class Y extends Component<{name: string}> {}\n\n      export default class Z extends Component {\n\n      }\n    ");

    tool.format("\n      const a = () => {\n        return (\n          <div>\n            <X />\n            <Y />\n            <A />\n          </div>\n        )\n      }\n    ").is("\n      import React from \"react\";\n      import A, { X, Y } from \"./A\";\n      const a = () => {\n        return (\n          <div>\n            <X />\n            <Y />\n            <A />\n          </div>\n        )\n      }\n    ");
  });

  it("support disable autoimport", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.writeFile("A.js", "\n      export default 1;\n    ");

    tool.format("\n      // autoimport-disable\n      const b = A;\n    ").is("\n      // autoimport-disable\n      const b = A;\n    ");
  });

  it("support remove unused import", function () {
    var tool = fixture();
    tool.startWithoutOptionFile();

    tool.format("\n      import A, {B, C as D} from './A';\n      import type A1 from './types1';\n      import type {B1, C1} from './types2';\n      import \"a.css\";\n      import \"./SideEffect\";\n\n      const E: C1 = F;\n    ").is("\n      import \"./SideEffect\";\n\n      import \"a.css\";\n      import type { C1 } from './types2';\n\n      const E: C1 = F;\n    ");
  });
});

describe("ConfigProvider cache", function () {
  it("could cache and load from cache", function () {
    var configProvider = new _ConfigProvider2.default();
    var projectPath = _path2.default.join(_os2.default.tmpdir(), "autoimport-e2e");
    if (_fs2.default.existsSync(projectPath)) {
      // Remove this folder
      _shelljs2.default.rm("-rf", projectPath);
    }

    _shelljs2.default.mkdir("-p", projectPath);

    var testFile = _path2.default.join(projectPath, "a.js");
    var optionsFile = _path2.default.join(projectPath, "autoimport.json");
    var cacheFile = _path2.default.join(projectPath, "autoimport.json.cache");

    var tool = {
      start: function start(options) {
        tool.writeOptions(options, { notify: false });
        configProvider.updateProjectPaths([projectPath]);
      },
      startWithoutOptionFile: function startWithoutOptionFile() {
        configProvider.updateProjectPaths([projectPath]);
      },

      writeOptions: function writeOptions(options_) {
        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { notify: true },
            notify = _ref2.notify;

        _fs2.default.writeFileSync(optionsFile, JSON.stringify(options_, null, 2));

        // Notify that optionsFile is updated
        if (notify) {
          configProvider.updateOptionFile(optionsFile);
        }

        return tool;
      },

      writeFile: function writeFile(file, content) {
        tool._initFile(file, content);

        var fullPath = _path2.default.join(projectPath, file);

        configProvider.addFile(fullPath, content);

        return tool;
      },

      // write file with out notify to configProvider
      _initFile: function _initFile(file, content) {
        var fullPath = _path2.default.join(projectPath, file);
        var dirName = _path2.default.dirname(fullPath);
        if (!_fs2.default.existsSync(dirName)) {
          _shelljs2.default.mkdir("-p", dirName);
        }

        _fs2.default.writeFileSync(fullPath, content);
      },

      format: function format(text, file) {
        var normalizedText = removeCodeIndent(text);

        var importFile = file != null ? _path2.default.join(projectPath, file) : testFile;
        var nextText = configProvider.formatFile(importFile, normalizedText);

        var checker = {
          is: function is(expectedText) {
            // console.log(removeCodeIndent(expectedText));
            expect(nextText.trim()).toEqual(removeCodeIndent(expectedText));

            return checker;
          }
        };

        return checker;
      }
    };

    //
    tool._initFile("types.js", "\n    export type TName = string;\n    ");

    tool.startWithoutOptionFile();
    configProvider.cache();

    expect(_fs2.default.existsSync(cacheFile)).toBe(true);

    // Create new ConfigProvider
    var configProvider2 = new _ConfigProvider2.default();
    configProvider2.fromCache([projectPath]);

    var text = configProvider2.formatFile(projectPath + "/a.js", "\nconst a: TName = \"abc\";\n    ");
    // console.log(text);
    expect(text).toContain("import type { TName } from \"./types\";");
  });
});
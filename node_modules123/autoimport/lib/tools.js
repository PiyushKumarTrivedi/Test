"use strict";

var _Config = require("./Config");

var _Config2 = _interopRequireDefault(_Config);

var _BuildSourceConfig = require("./utils/BuildSourceConfig");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); } // import transformBuilder from "./auto-import";


var fs = require("fs");
var path = require("path");
// import { prepareJscodeshift } from "./utils/jscodeshift";
var chalk = require("chalk");

// const success = chalk.green;
var error = chalk.red;

// console.log(jscodeshift);
// function process_(options, file, cliOpts) {
//   const transform = transformBuilder(options);

//   const jscodeshift = prepareJscodeshift({
//     parser: "flow",
//   });

//   const source = fs.readFileSync(file).toString("utf8");
//   // console.log(source);

//   const out = transform(
//     {
//       path: file,
//       source: source,
//     },
//     {
//       j: jscodeshift,
//       jscodeshift: jscodeshift,
//       stats: function empty() {},
//     }
//   );

//   if (!out || out === source) {
//     // No change
//     /* eslint-disable no-console */
//     console.log(success("no change"));
//     /* eslint-enable no-console */

//     return;
//   }

//   // Write change
//   if (cliOpts.write) {
//     fs.writeFileSync(file, out);
//   } else {
//     /* eslint-disable no-console */
//     console.log("out", out);
//     /* eslint-enable no-console */
//   }
// }

function _script() {
  var argv = require("minimist")(process.argv.slice(2));

  var _argv$_ = _toArray(argv._),
      command = _argv$_[0],
      restInputs = _argv$_.slice(1),
      params = _objectWithoutProperties(argv, ["_"]);

  var scriptOptions = {
    inputs: restInputs,
    params: params
  };

  var cmdMap = {
    gen: _scriptGen
    // import: _scriptImport,
  };

  if (!cmdMap[command]) {
    error("Invalid command " + command);
    process.exit(1);
  }

  cmdMap[command](scriptOptions);
}

/**
 * Generate the 'sources' field for config file
 */
function _scriptGen(_ref) {
  var _ref$params = _ref.params,
      optionsFile = _ref$params.c,
      write = _ref$params.write;

  // console.log("gen sources for ", optionsFile);
  var options = _loadOptionsFile(optionsFile);
  var config = new _Config2.default(options);

  // console.log(config);

  var _scanSourceDir = (0, _BuildSourceConfig.scanSourceDir)(path.join(config.projectPath, config.rootPath)),
      valuePackages = _scanSourceDir.value,
      typeOptions = _scanSourceDir.type;
  // console.log("a", optionsSource);

  var generatedOptions = Object.assign({}, options, {
    packages: Object.assign({}, options.packages, valuePackages),
    types: typeOptions
  });

  delete generatedOptions.projectPath;

  var genFile = optionsFile.replace(".json", ".gen.json");
  fs.writeFileSync(genFile, JSON.stringify(generatedOptions, null, 2));
}

function _loadOptionsFile(optionsFile) {
  optionsFile = _normalizePath(optionsFile);
  var options = JSON.parse(fs.readFileSync(optionsFile).toString());
  options.projectPath = path.dirname(optionsFile);

  return options;
}

// function _scriptImport({
//   params: { c: configFile, write },
//   inputs: [inputFile],
// }) {
//   let cliOptions = {
//     write: !!write,
//   };
//   const options = _loadOptionsFile(configFile);
//   // console.log(config);

//   // let inputFile = cli.input[0];
//   inputFile = _normalizePath(inputFile);
//   // console.log(inputFile);
//   process_(options, inputFile, cliOptions);
// }

function _normalizePath(f) {
  if (!path.isAbsolute(f)) {
    return path.join(process.cwd(), f);
  }

  return f;
}

_script();
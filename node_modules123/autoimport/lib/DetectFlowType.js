"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectFlowType = detectFlowType;

var _lodash = require("lodash");

var _recast = require("recast");

var _recast2 = _interopRequireDefault(_recast);

var _Query = require("./utils/Query");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var types = _recast2.default.types.namedTypes;

// input: const A: TA = 1;
// output: ["TA"]

var GenericTypeAnnotationIdentifier = (0, _Query.withQueryTransform)({
  query: types.GenericTypeAnnotation,
  filter: {
    id: {
      type: "Identifier"
    }
  },
  nodeTransform: function nodeTransform(node) {
    return node.id.name;
  }
});

// input: type TA = number;
// output: ["TA"]
var TypeAliasIdentifiers = (0, _Query.withQueryTransform)({
  query: types.TypeAlias,
  filter: {
    id: {
      type: "Identifier"
    }
  },
  nodeTransform: function nodeTransform(node) {
    return node.id.name;
  }
});

// input: type T1<T2> = {};
// output: ["T2"]
var TypeParameterIdentifier = (0, _Query.withQueryTransform)({
  query: types.TypeParameter,
  nodeTransform: function nodeTransform(node) {
    return node.name;
  }
});

// input: import type {TA} from './types';
// output: ["TA"]
var ImportDeclarationIdentifiers = (0, _Query.withQueryTransform)({
  query: types.ImportDeclaration,
  filter: {
    importKind: "type"
  },
  flatNodeTransform: function flatNodeTransform(node) {
    return node.specifiers != null ? node.specifiers.map(function (item) {
      return item.imported != null ? item.imported.name : null;
    }).filter(function (item) {
      return item;
    }) : [];
  }
});

function detectFlowType(ast) {
  var definedTypes = (0, _Query.compose)(TypeAliasIdentifiers, ImportDeclarationIdentifiers, TypeParameterIdentifier)(ast);

  var undefinedTypes = (0, _Query.compose)(
  // Flow type idenfiers
  GenericTypeAnnotationIdentifier)(ast);

  return (0, _lodash.difference)(undefinedTypes, definedTypes);
}
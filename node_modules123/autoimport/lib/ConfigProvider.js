"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProjectConfigProvider = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _BuildSourceConfig = require("./utils/BuildSourceConfig");

var _Config = require("./Config");

var _Config2 = _interopRequireDefault(_Config);

var _ImportBuilder = require("./utils/ImportBuilder");

var _OptionFile = require("./utils/OptionFile");

var _lodash = require("lodash");

var _jscodeshift = require("./utils/jscodeshift");

var _autoImport = require("./auto-import");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var builtinPackages = {
  react: {
    main: "React",
    others: ["Component", "PureComponent"]
  },
  "react-dom": {
    main: "ReactDOM"
  },
  "prop-types": {
    main: "PropTypes"
  }
};

var ProjectConfigProvider = exports.ProjectConfigProvider = function () {
  function ProjectConfigProvider(file) {
    _classCallCheck(this, ProjectConfigProvider);

    _initialiseProps.call(this);

    this.genOptions = _OptionFile.initNormalizedOptions;
    this.text2text = this._buildText2Text();

    this.scaned = false;
    if (file != null) {
      this.loadOptionFile(file);
    }
  }

  _createClass(ProjectConfigProvider, null, [{
    key: "fromCache",
    value: function fromCache(cacheFile) {
      var cacheContent = _fs2.default.readFileSync(cacheFile).toString("utf-8");
      var cache = JSON.parse(cacheContent);

      var cp = new ProjectConfigProvider();
      cp.config = _Config2.default.fromCache(cache);

      return cp;
    }

    /**
     * Check if file belong to this project
     */

  }]);

  return ProjectConfigProvider;
}();

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.getAutoImportStatus = function () {
    return Object.assign({
      hasJSONConfigFile: true

    }, _this2.config.getStats());
  };

  this._buildText2Text = function () {
    var jscodeshift = (0, _jscodeshift.prepareJscodeshift)({
      parser: "flow"
    });

    var api = {
      j: jscodeshift,
      jscodeshift: jscodeshift,
      stats: function empty() {}
    };

    var Text2Text = function Text2Text(file, text) {
      return (0, _autoImport.transformByConfigProvider)({
        path: file,
        source: text
      }, api, _this2);
    };

    return Text2Text;
  };

  this.loadOptionFile = function (file) {
    _this2.file = file;
    _this2.projectPath = _path2.default.dirname(file);

    var options = void 0;
    if (_fs2.default.existsSync(file)) {
      options = JSON.parse(_fs2.default.readFileSync(file).toString());
    } else {
      options = Object.assign({}, _OptionFile.initNormalizedOptions);
    }
    options.projectPath = _path2.default.dirname(file);

    var normalizedOptions = (0, _lodash.defaultsDeep)(options, {
      packages: {},
      types: {},
      memberFolders: [],
      rootPath: "",
      ignore: []
    });

    var genOptions = Object.assign({}, normalizedOptions, {
      packages: Object.assign({}, builtinPackages, normalizedOptions.packages)
    });

    if (!_this2.scaned) {
      var packagesFromSource = (0, _BuildSourceConfig.scanSourceDir)(_path2.default.join(genOptions.projectPath, genOptions.rootPath));

      genOptions = Object.assign({}, genOptions, {
        packages: Object.assign({}, packagesFromSource, genOptions.packages)
      });

      _this2.scaned = true;
    }

    // Cache this to detect difference between options to improve performance
    var optionsDiff = (0, _OptionFile.diffOptions)(_this2.genOptions, genOptions);
    _this2.genOptions = genOptions;
    _this2.options = normalizedOptions;
    _this2.rootPath = normalizedOptions.rootPath;

    _this2._buildConfig(optionsDiff);
  };

  this._buildConfig = function (optionsDiff) {
    if (!_this2.config) {
      _this2.config = new _Config2.default(_this2.genOptions);
    }

    // Build package import
    // TODO Fix this
    var newPackages = _this2.genOptions.packages;
    _this2.config.applyPackagesDiff(newPackages, optionsDiff.packages);

    // Build memberFolders import
    _this2.config.loadMemberFolders();

    // Change ignore
    _this2.config.options.ignore = _this2.genOptions.ignore;
  };

  this.getImport = function (currentFilePath, member) {
    var memberInfo = _this2.config.getMemberInfo(member);
    if (memberInfo) {
      return Object.assign({}, memberInfo, {
        path: (0, _ImportBuilder.normalizePath)(currentFilePath, memberInfo.path)
      });
    }
  };

  this.containFile = function (file) {
    // console.log("cf", file, this.config.projectPath);
    return _this2.config.projectPath && file.startsWith(_this2.config.projectPath);
  };

  this.format = function (file, text) {
    var projectPath = _path2.default.relative(_this2.getFullRootPath(), file);
    // console.log('format1', projectPath);
    return _this2.text2text(projectPath, text);
  };

  this.addFile = function (fullPath, content) {
    var packageOption = (0, _BuildSourceConfig.getExportInfoFromSource)(fullPath, content);

    var relativePath = _path2.default.relative(_this2.getFullRootPath(), fullPath);
    var filePath = (0, _BuildSourceConfig.file2Path)(relativePath);

    // Build optionsDiff
    var packages = _defineProperty({}, filePath, packageOption);

    var optionsDiff = {
      packages: {
        removed: [],
        added: [filePath],
        replaced: []
      }
    };

    _this2.config.applyPackagesDiff(packages, optionsDiff.packages);
  };

  this.getFullRootPath = function () {
    if (_path2.default.isAbsolute(_this2.config.rootPath)) {
      return _this2.config.rootPath;
    }

    return _path2.default.join(_this2.config.projectPath, _this2.config.rootPath);
  };

  this.cache = function () {
    var cache = _this2.config.getCache();
    _fs2.default.writeFileSync(_this2.projectPath + "/autoimport.json.cache", JSON.stringify(cache, null, 2));
  };
};

var ConfigProvider = function ConfigProvider() {
  var _this = this;

  _classCallCheck(this, ConfigProvider);

  this.updateProjectPaths = function (projectPaths) {
    _this.projectPaths = projectPaths;
    _this.projectConfigs = projectPaths.map(function (projectPath) {
      return new ProjectConfigProvider(_path2.default.join(projectPath, "autoimport.json"));
    });
  };

  this.getAutoImportStatus = function () {
    return _this.projectConfigs.map(function (pc) {
      return pc.getAutoImportStatus();
    });
  };

  this.fromCache = function (projectPaths) {
    _this.projectPaths = projectPaths;
    _this.projectConfigs = projectPaths.map(function (projectPath) {
      return ProjectConfigProvider.fromCache(_path2.default.join(projectPath, "autoimport.json.cache"));
    });
  };

  this.formatFile = function (absFile, text) {
    if (!_path2.default.isAbsolute(absFile)) {
      throw new Error("Need absolute file path to format. Got " + absFile);
    }

    if (text.indexOf("// autoimport-disable") >= 0) {
      // Ignore
      return text;
    }

    var matchedPC = _this.projectConfigs.filter(function (pc) {
      return pc.containFile(absFile);
    })[0];

    var result = void 0;
    if (matchedPC) {
      // console.log('find matched');
      result = matchedPC.format(absFile, text);
    } else {
      result = text;
    }

    return result;
  };

  this.updateOptionFile = function (file) {
    var matchedPC = _this.projectConfigs.filter(function (pc) {
      return pc.file === file;
    })[0];

    if (matchedPC) {
      return matchedPC.loadOptionFile(file);
    }
  };

  this.addFile = function (fullPath, content) {
    var matchedPC = _this.projectConfigs.filter(function (pc) {
      return pc.containFile(fullPath);
    })[0];

    if (matchedPC) {
      return matchedPC.addFile(fullPath, content);
    }

    return content;
  };

  this.cache = function () {
    // Cache the import
    _this.projectConfigs.forEach(function (pc) {
      return pc.cache();
    });
  };
};

exports.default = ConfigProvider;
"use strict";

var _DetectUndefinedIdentifierTestUtils = require("./DetectUndefinedIdentifierTestUtils");

describe("Detect Undefined Identifier for Flow Type", function () {
  var _codeBuilder = (0, _DetectUndefinedIdentifierTestUtils.codeBuilder)("DetectUndefinedIdentifierFlow", "default"),
      code = _codeBuilder.code,
      codeFile = _codeBuilder.codeFile;

  // it("_DebugUndefinedIdentifier", () => {
  //   codeFile("_DebugUndefinedIdentifier")
  //     .missImport("C")
  //     .noImport("a");
  // });

  it("detect undefined flow type", function () {
    code("\n    const A: TA = 1;\n    ").missImportType("TA").noImport("TA");
  });

  it("declared flow type", function () {
    code("\n    type TA = number;\n    const A: TA = 1;\n    ").noImportType("TA");
  });

  it("declared flow type: object type", function () {
    code("\n    type TUser = {\n      name: string,\n      age: number\n    };\n    const A: TUser = {\n      name: \"A\",\n      age: 10\n    };\n    ").noImportType("TUser");
  });

  it("ignore imported type", function () {
    code("\n    import type {TUser} from './types';\n    const A: TUser = {\n      name: \"A\",\n      age: 10\n    };\n    ").noImportType("TUser");
  });

  // This case is not important because try to auto import will lead to syntax error
  it.skip("not mess FlowType with default identifier", function () {
    code("\n    import type {TUser} from './types';\n    TUser();\n    ").missImport("TUser");
  });

  it("Define flowtype", function () {
    code("\n      // @flow\n      type TItem = {\n        value: string\n      };\n      ").noImportType("TItem").noImport("TItem");
  });

  it("Generic type in flow is not undefined identifier", function () {
    code("\n    type TItem<TValue> = {\n      value: TValue\n    };\n    ").noImportType("TValue").noImport("TValue", "TItem");
  });

  // TODO Fix this
  it("flow generic class", function () {
    code("\n    class B extends C<T2> {}\n    ").missImportType("T2").missImport("C")
    // .missImport("T2", "C", "D", "E")
    .noImport("T1", "A", "B", "T3");
  });

  it("ignore-generic-type-annotation", function () {
    codeFile("ignore-generic-type-annotation").noImport("TValue");
  });
});
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
// autoimport-disable

exports.parseIdentifierNameOfOther = parseIdentifierNameOfOther;

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _parseIdentifierNameOfOtherPattern = new RegExp("^(\\S+)\\s+as\\s+(\\S+)$");
function parseIdentifierNameOfOther(otherStr) {
  var result = _parseIdentifierNameOfOtherPattern.exec(otherStr);

  if (result == null) {
    return {
      memberName: otherStr,
      memberAlias: otherStr
    };
  } else {
    return {
      memberAlias: result[2],
      memberName: result[1]
    };
  }
}

function _getNodeModulesForMemberFolder(detectFolder, memberFolder) {
  var fullMemberFolder = _path2.default.join(detectFolder, "node_modules", memberFolder);

  if (!_fs2.default.existsSync(fullMemberFolder)) {
    // TODO Show a warning or watch this folder to load again when memberFolder available
    return "";
  }

  return fullMemberFolder;
}

var Config = function () {
  function Config(options) {
    var _this = this;

    _classCallCheck(this, Config);

    this.getStats = function () {
      return {
        numberIdentifiers: Object.keys(_this._memberMap).length,
        memberFolders: _this._getFullMemberFolders()
      };
    };

    this.getCache = function () {
      return {
        _memberMap: _this._memberMap,
        options: _this.options
      };
    };

    this._updateMemberInfoIfNotExists = function (member, info) {
      if (_this._memberMap[member]) {
        return;
      }

      _this._memberMap = Object.assign({}, _this._memberMap, _defineProperty({}, member, info));
    };

    this.getMemberInfo = function (member) {
      // Only accept the member not declared in ignore
      if (_this.options.ignore.indexOf(member) < 0) {
        if (!_this._memberMap[member]) {
          /* eslint-disable no-console */
          console.warn("there is no member", member);
          /* eslint-enable no-console */
        }
        return _this._memberMap[member];
      } else {
        /* eslint-disable no-console */
        console.warn("Member in ignore", member);
        /* eslint-enable no-console */
      }
    };

    this._getMemberInfosFromImportInfo = function (path, info) {
      var ret = {};
      if (info.main != null) {
        ret[info.main] = {
          path: path,
          defaultImport: true,
          exportKind: "value"
        };
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (info.others || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var member = _step.value;

          var _parseIdentifierNameO = parseIdentifierNameOfOther(member),
              memberName = _parseIdentifierNameO.memberName,
              memberAlias = _parseIdentifierNameO.memberAlias;

          ret[memberAlias] = {
            path: path,
            defaultImport: false,
            exportKind: "value"
          };

          if (memberName !== memberAlias) {
            ret[memberAlias].actualName = memberName;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = (info.types || [])[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _member = _step2.value;

          ret[_member] = {
            path: path,
            defaultImport: false,
            exportKind: "type"
          };
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return ret;
    };

    this._removePackage = function (package_) {
      // console.log("p", p, this.packages);
      var tmp = _this._getMemberInfosFromImportInfo(package_, _this.packages[package_]);
      // console.log("tmp", tmp);
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = Object.keys(tmp)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var member = _step3.value;

          delete _this._memberMap[member];
        }

        // remove this package
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      delete _this.packages[package_];
    };

    this._addPackage = function (package_, importInfo) {
      var tmp = _this._getMemberInfosFromImportInfo(package_, importInfo);
      _this._memberMap = Object.assign({}, _this._memberMap, tmp);

      _this.packages = Object.assign({}, _this.packages, _defineProperty({}, package_, importInfo));
    };

    this.applyPackagesDiff = function (packages, _ref) {
      var removed = _ref.removed,
          added = _ref.added,
          replaced = _ref.replaced;

      // Remove packages
      removed.forEach(_this._removePackage);

      // Replace packages
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = replaced[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var p = _step4.value;

          // Remove old package
          _this._removePackage(p);

          // Add new package
          _this._addPackage(p, packages[p]);
        }

        // Add packages
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      added.forEach(function (p) {
        return _this._addPackage(p, packages[p]);
      });
    };

    this._getFullMemberFolders = function () {
      // $FlowFixMe
      return (0, _lodash.flatMap)(_this.options.memberFolders || [], function (memberFolder) {
        var detectFolders = [_this.projectPath, _path2.default.join(_this.projectPath, _path2.default.dirname(_this.rootPath)), _path2.default.join(_this.projectPath, _this.rootPath)];
        // console.log(detectFolders);
        var fullMemberFolders = detectFolders.map(function (detectFolder) {
          return _getNodeModulesForMemberFolder(detectFolder, memberFolder);
        }).filter(function (f) {
          return f !== "";
        });

        // console.log(fullMemberFolders);

        return fullMemberFolders.map(function (f) {
          return [f, memberFolder];
        });
      });
    };

    this.loadMemberFolders = function () {
      var _loop = function _loop(_ref2) {
        _ref3 = _slicedToArray(_ref2, 2);
        var fullMemberFolder = _ref3[0];
        var memberFolder = _ref3[1];

        var memberNames = _fs2.default.readdirSync(fullMemberFolder).filter(function (item) {
          return item.endsWith(".js");
        }).map(function (item) {
          return item.replace(".js", "");
        });

        memberNames.forEach(function (member) {
          // autoDetectMembers[member] = memberFolder + "/" + member;
          // Only update if member is not exists
          _this._updateMemberInfoIfNotExists(member, {
            path: memberFolder + "/" + member,
            // TODO verify it
            defaultImport: true,
            package: true,
            // Member folder just support exportKind=value, not support flow type at the moment
            exportKind: "value"
          });
        });
      };

      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = _this._getFullMemberFolders()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var _ref2 = _step5.value;

          var _ref3;

          _loop(_ref2);
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }
    };

    this.options = options;
    // console.log("o", this.options);

    this.memberFolders = this.options.memberFolders;
    this.packages = this.options.packages;
    this.types = this.options.types || {};
    this.projectPath = this.options.projectPath;
    this.rootPath = this.options.rootPath;
    this._memberMap = {};
  }

  _createClass(Config, null, [{
    key: "fromCache",
    value: function fromCache(cache) {
      var c = new Config(cache.options);
      c._memberMap = cache._memberMap;

      return c;
    }
  }]);

  return Config;
}();

exports.default = Config;